          Assignment 6.1: Sponsored Search Auctions (Programming)
                      Francisco J. Marmolejo-Coss´ıo
                 Department of Computer Science, Boston College
                        Out Friday 10/24/25
                    Due 5pm sharp: Friday 10/31/25
                        Submissions to Canvas
       [Total: 137 Points] The total number of points includes a small bonus for good performance
       in an in-class tournament. However, please note that the main purpose of this assignment is to
       learn and implement different auction mechanisms - wining the tournament is NOT the goal of
       this assignment! It is advisable that you don’t spend too much time tuning your agent to win the
       tournament.
         This is a group-assignment to be completed by groups of up to two students. If you want
       a partner and don’t have one, you can use our course slack workspace to coordinate a study
       group. While you are permitted to discuss your agent designs with other students, each group must
       develop its own code and write-up its own submission.
         Yoursubmissions should be made to Canvas: the code must be in .py files and the writeup of the
       analysis must be in PDF format. Both partners must contribute to all aspects of the assignment.
       If you use any code whatsoever from any source other than the ofÏcial Python documentation, you
       must acknowledge the source in your writeup.
       Youcandownloadallrelevantfilesfortheproblemsethere: pset6-prog-code-release.zip.
       Submission Instructions
       Bothgroupmembersneedtomakethesubmissionbyuploadingthefollowingfiles(replaceTEAMNAME
       in the filenames with your actual group name) to the Canvas assignment.
        1. Pythonsourcecodefilesyouimplemented: TEAMNAMEbb.py,TEAMNAMEbudget.py,andvcg.py.
          If you want to create functions which both your agents can share, please create them in a
          new file named TEAMNAMEhelper.py, and submit that as well.
        2. A PDF file TEAMNAMEsolution.pdf containing your team’s writeup of the analysis .
       Please upload by selecting these files directly, then drag and drop them into Canvas. Do not submit
       by uploading a .zip file of a folder containing the required files.
         Moreover, please follow the below instructions when implementing your code:
         • Your code should run on an un-modified version of the handout code; in particular, you
          should not modify any of auction.py, stats.py, gsp.py, history.py, truthful.py,
          util.py, and you should not submit these files.
                             1
         • Please do not use functions not in the Python standard library. One exception is that you
          can use pandas or numpy if you want to, but in that case you should make sure that your code
          is compatible with pandas 1.3.3 and numpy 1.21.2. Those two libraries are not necessary
          for this assignment, since you can do the operations that you’ll need to do using a combination
          of the math library as well as functions like map, reduce, zip, filter.
       1 Introduction
       You will program bidding agents to participate in a generalized second-price (GSP) auction. The
       first agent you will design uses a balanced bidding strategy (see Definition 10.10 in the reading).
         You will also design an agent to do as well as possible in a competitive environment, and in the
       presence of daily budget constraints on how much it can spend. You will also explore the effect
       that the design of payment rules has on revenue.
       2 Setup
       Generating .py-files: Pick a group name, perhaps based on your initials, so it will be unique
          in the class. Run python start.py TEAMNAME, substituting your group name for TEAMNAME.
          This will create appropriately named template files for your clients. For example, if your
          group name was “abxy”:
          > python start.py abxy
            Copying bbagent_template.py to abxybb.py...
            Copying bbagent_template.py to abxybudget.py...
            All done. Code away!
          In each of these newly generated files, you will need to change the class name BBAgent to
          your teamname plus client specification (e.g. for the balanced bidding agent: class Abxybb).
          This class name should match the file name exactly, though it can have capital letters (and
          the filename should be exactly the one generated by start.py).
       The simulator: You are given an ad-auction simulator. We ignore quality effects, so that in a
          time period, only the position matters in determining the probability of a click and thus the
          expected number of clicks received by an ad.
          The simulator works as follows:
           • Time proceeds in discrete periods (0,1,2,...,47). Each period simulates 30 minutes,
            and the 48 periods correspond to a day. The simulator can be used to simulate multiple
            days by increasing the number of iterations.
           • In the first period, an agent’s bid is queried through initial_bid() whereas for all
            subsequent periods, the bid is queried through a call to bid(). The simulator tracks
            money and values in integer numbers of cents. The same bid value is used for every
            auction that occurs within a period. To encourage competition, the number of available
            positions is one less than the number of agents in the market in auction.py. But your
                             2
                            implementation should support more general cases to pass the test cases (see the test
                            cases in test bb.py for example).
                         • Each period is simulated by collecting bids, assigning positions, determining the ex-
                            pected number of clicks received by each bidder, and determining payments and utilities.
                            Sometimes there is a reserve price (see Section 4). The positions are assigned in order
                            of submitted bid.
                         • Number of clicks: Let ct denote the number of clicks received by an ad in position j
                                                      j
                            (from 1 to the number of positions) in period t. For the top position, this follows a
                            cosine curve:
                                                   ct = round(30cos(πt)+50),         t = 0,1,...,                    (1)
                                                    1                  24
                            where round(x) returns the nearest integer value to x. The number of clicks starts at
                            80, falls to 20 by period 24, and increases to 80 by the end of a day.
                            Thenumberofclicks decreases according to a multiplicative position effect. The number
                            of clicks received by an ad in position j (j > 1) in period t is
                                                               t              (j−1) t
                                                              c =round(0.75        c ),                              (2)
                                                               j                    1
                            so that it decreases by a factor of 75% from position to position.
                         • The price in the GSP auction depends on the next highest bid. Given this, the utility
                            in period t to agent i occupying position j is
                                                         t    t       t         t       t
                                                        u =c (vi −p        ) = c (vi − b   ),                        (3)
                                                         i    j       gsp,j     j       j+1
                            where vi is the per-click value, and pt    the per-click price for position j under the GSP
                                                                  gsp,j
                            auction and equal to bt    , which is the amount of the next highest bid (or zero or the
                                                    j+1
                            reserve if there is no such bid.) Thus is the number of clicks received multiplied by the
                            utility (= value - price) per click.
                                                                                                                  t t
                         • Budget constraint: The total payment by an agent in position j in period t is c b            .
                                                                                                                  j j+1
                            Each agent has a daily budget constraint, but for most of the assignment this will be
                            high enough not to matter. For the competition this is $600/day and it will matter.
                            An agent with budget still available at the start of a period is still allowed to bid. For
                            this reason, an agent is allowed to slightly over-spend its budget. Once the budget is
                            exhausted the bid in all subsequent periods of the day must be $0 (the simulator will
                            ensure this if you try to bid more than $0.)
                         • At the start of each day, the per-click value vi of an agent is sampled independently from
                            the uniform distribution on [0.25,1.75]. The simulator also runs additional permutations
                            of value assignments to agents to improve the statistical significance of the estimated
                            utility. If the number of agents is at most 5 then all permutations of values to agents are
                            tested. Otherwise, 120 random permutations are tested. (You can change this threshold
                            with the --perms option)
                         • The score of an agent is the total utility over all 48 periods, and averaged over all
                            permutations of values to agents that are used. In addition, multiple iterations can be
                                                                    3
                              run. This has the effect of repeating the test over multiple days. In this case the score
                              is the average total utility over all permutations and all days. For a single day, the
                                                                         P            P
                                                                            47   t      47   t         t
                              total utility to agent i with value v is          u =         c   (v −b       ), where x    is the
                                                                     i      t=0 i       t=0 xit   i    xit+1            it
                                                                                   t
                              position assigned in period t to agent i (and c          =0if the agent is not assigned to a
                                                                                   xit
                              position in period t. Any unspent budget has no effect on utility or score.
                  Source code: Familiarize yourself with the provided code. You will need to change the agent
                        created by start.py, as well as the file vcg.py. You’ll want to take a look at the simple
                        truthful-bidding agent in truthful.py, as well as the the GSP implementation in gsp.py.
                  Testing: Here are some initial test commands to run. The following command gives a list of
                        helpful command line parameters:
                             > python auction.py --h
                        The following command can be used to test the code. It runs the auction with five truthful
                        agents for two periods (rather than the default of 48 periods). The --perms 1 command
                        forces the simulator to assign only one permutation of value to the agents.
                             > python auction.py --loglevel debug --num-rounds 2 --perms 1 Truthful,5
                        The number of periods defaults to 48 if this is not set.
                        The following command runs the auction with a reserve price of 40 cents. The --iters 2
                        command specifies that the 48 periods will be repeated twice, with different value samples
                        (i.e., two days.) The --seed INT (where INT is any integer) command sets the seed of the
                        random number generators in the simulator and allows for repeatability.
                             > python auction.py --perms 1 --iters 2 --reserve=40 --seed 1 Truthful,5
                  Tips      • Debugging: Setting log_console = False to log_console = True in auction.py can
                              give you a closer look at what’s happening within each round.
                           • Permutations: If you’re running an experiment on a population of agents that each
                              have the same strategy, use --perms 1 to make the code run faster. In this case this
                              is probably OK because you’re likely comparing the average utility or revenue of the
                              auction, and not looking at specific agents.
                           • Pseudo-random numbers: If you’re trying to track down a bug, or understand what’s go-
                              ing on with some specific case, use --seed INT to fix the random seed and get repeatable
                              value distributions and tie breaking.
                  Comments          • Numbering convention: The positions (slots) in this write-up are 1-indexed (top
                              slot is slot number 1) but 0-indexed in the code. Don’t be confused by this!
                           • Ties: In the case of two tied bids one of the two is randomly chosen to be allocated th
                              higher slot.
                                                                        4
                         • State: The agent you write can access history from the previous period within each day.
                            This could allow for more sophisticated strategies.
                         • Workarounds: The code is designed so that it’s hard to mess up the main simulation
                            accidentally, but because everything is in the same process, it is still possible to cheat
                            by directly modifying the simulation data structures and such. Don’t!
                         • Bugs: If you find bugs in the code, please let us know. If you want to improve the
                            logging or stats or performance or add animations or graphs, feel free :) Send those
                            changes along too.
                         • Questions: If something is unclear about the assignment, please ask a question on Ed.
                            If you need to post your code, make a private thread.
                         • Debugging tips: Be careful about division by zero errors! Also make sure list indices are
                            always integers!
                3     The Balanced Bidding Agent
                   1. [2 Points] What is your team name?
                   2. [30 Points] Designing a bidding agent
                      You are given a truthful bidding agent in truthful.py.
                      In TEAMNAMEbb.py, write an agent that best-responds to the bids of agents in the previous
                      period. In particular, the agent follows a balanced bidding strategy. Consider period t. Let
                       t−1
                      b    denote the bids from the agents other than i in the period t − 1. Suppose there are m
                       −i
                      positions. Balanced-bidding proceeds as follows:
                         • Given bids bt−1, agent i targets the position j∗ that maximizes
                                         −i
                                                             max [posj ·(vi −pricej)],                               (4)
                                                          j∈{1,...,m}
                            wherepos istheposition effect (which you should estimate by using the number of clicks
                                      j
                            in the previous round) and pricej is the price the agent would pay for position j given
                                  t−1
                            bids b   .  For example, in GSP auction with no reserve price, pricej equals the j-th
                                  −i        t−1
                            highest bid in b   . Note that the agent should omit its own bid in the previous round
                                            −i
                            and factor in the reserve price when computing its expected utility. And calculating the
                            resulting expected utility should be a simple calculation (a single equation).
                                                                                                              t
                         • (Not expecting to win) If price pricej∗ ≥ vi in this target position, then bid b = vi in
                                                                                                              i
                            period t.
                         • Otherwise:
                                                                             ∗                    t
                            (a) (Not going for the top) If target position j > 1, then set bid b to satisfy
                                                                                                  i
                                                            ∗                      ∗         t
                                                        posj (vi − pricej∗) = posj −1(vi − b ).                      (5)
                                                                                             i
                            (b) (Going for the top) If j∗ = 1, then bid bt = vi.
                                                                          i
                                                                   5
                      This strategy is motivated by the balanced bidding discussion the reading (Section 10.4.2).
                      The file TEAMNAMEbb.py provides a skeleton of a balanced bidding agent. You will need to
                      complete the code to compute the expected utility for each position and the optimal bid.
                      Notethatinthecodethebidsinthepreviousroundcanbeaccessedbylookingathistory.round(t-1);
                      the function slot info does this for you.
                   3. [20 Points] Experimental Analysis
                      To answer the following questions, run the simulation with 5 agents. By default
                      the budget is $5000, which is not binding. Leave it this way!
                       (a) [10 Points] What is the average utility of a population of truthful agents? What is the
                           average utility of a population of balanced bidding agents? Compare the two cases and
                           explain your findings.
                           Make use of the --perms, --seed, and --iters commands, e.g. --perms 1 --seed 2
                           --iters 200 would be a good starting point.
                       (b) [10 Points]Inaddition, whatistheaverageutilityofonebalanced-biddingagentagainst
                           4 truthful agents, and one truthful agent against 4 balanced-bidding agents? For the
                           new experiment, make use of the --seed, and --iters commands, but you will now
                           want to run multiple permutations. Note that you can add multiple agents types using:
                                 > python auction.py --perms 10 --iters 200 Truthful,4 abxybb,1
                           What does this suggest about the incentives to follow the truthful vs. the balanced bidding
                           strategy?
                4     Experiments with Revenue: GSP vs VCG auctions
                In this section we compare the revenue properties of the GSP and VCG auctions with different
                reserve prices. A reserve price, r > 0, sets a minimum price for any position. Used carefully,
                reserve prices can increase revenue. The reserve price in the GSP works as follows: only bids
                (weakly) above r can be allocated. The agent in the lowest allocated position pays the maximum
                of the reserve price and the maximum bid of unallocated bidders. The VCG auction works in a
                                                     1
                similar way and is explained below.
                   4. [55 Points] Auction Design and Reserve Prices
                      Run all simulations with 5 agents. Leave the budget to its default of $5000.
                       (a) [20 Points] Complete the code that runs the VCG auction in vcg.py. The allocation
                           rule is already implemented. You need to implement the payment rule. Because of the
                           reserve price, it is most convenient to use the recursive form of the VCG payment rule
                           (see the proof of Theorem 10.23 in the reading).
                   1One way to think about it is that the reserve is effected in the VCG mechanism by including a “dummy bidder”
                whose bid is the amount of the reserve, and ignoring all bids with value less than r.
                                                                   6
                            In particular, suppose there are 3 bidders with bids weakly greater than the reserve price,
                            and b ≥ b ≥ b , and say that b is the fourth highest bid. Bidders 1–3 are allocated
                                  1    2     3                 4
                            the top 3 positions.
                            Let t    (b) denote the expected payment by bidder i in a single auction given bid profile
                                 vcg,i
                            b. For bidder 3, this is t    (b) = pos max(r,b ). For bidders 1 and 2, in positions 1
                                                      vcg,3         3         4
                            and 2 respectively, this can be calculated as t     (b) = (pos −pos      )b   +t        (b).
                                                                            vcg,i         i       i+1  i+1    vcg,i+1
                            (See also Equation 10.5 in the reading).
                       (b) [10 Points] What is the auctioneer’s revenue under GSP with no reserve price when
                            all the agents use the balanced-bidding strategy? What happens as the reserve price
                            increases? What is the revenue-optimal reserve price?
                            Youcansetthereservepriceinthesimulationwiththecommandlineargument--reserve INT
                            (where INT is the reserve price in cents). Also use --perms 1 and --iters 200.
                        (c) [10 Points] What is the auctioneer’s revenue under VCG with no reserve price when all
                            agents are truthful? What happens as the reserve price increases? Explain your findings
                            and compare with the results of part (b).
                            Again use the --perms, --seed, and --iters commands, e.g. --perms 1 --seed 2
                            --iters 200.
                       (d) [10 Points] Fix the reserve price to zero. Explore what might happen if a search engine
                            switched over from the GSP to VCG design. For this, run the balanced-bidding agents in
                            GSP, and at period 24, switch to VCG, by using the --mech=switch parameter. What
                            happens to the revenue?
                            Again use the --perms, --seed, and --iters commands, e.g. --perms 1 --seed 2
                            --iters 200.
                        (e) [5 Points] In one paragraph, state what you learned from these exercises about agent
                            design, auction design, and revenue? (There is no specific right answer).
                5     The Competition
                   5. [30 Points] Budget constraints
                      The balanced-bidding agent does not consider the budget constraint when deciding how to
                      bid. In the final part of the assignment, your task is to design a budget-aware agent.
                      This agent will compete in the simulated GSP auction against the agents submitted by other
                      groups. You might like to test your design against a variety of other strategies.
                      For example, you could write an agent that measures competition, or tries to drive up the
                      payments of other agents so that they pay more and exhaust their budgets! Example ideas
                      include:
                         • Trying not to bid too much when prices are high.
                         • Try to bid when other agents are not bidding very much and the price is lower.
                      For the purpose of the competition, the daily budget constraint will be set to
                      $600 (use the --budget flag). We will run a GSP auction with a small reserve
                      price. Auctions will contain around 5 agents.
                                                                   7
          The competition will be structured as a Swiss-style tournament with 8 rounds. In the first
          round, agents will randomly be placed into groups of 5. In subsequent rounds, agents will be
          placed into groups of 5 with other agents that have the same previous track record.
          (a) [25 Points] In TEAMNAMEbudget.py, write your competition agent. For full credit, make
            sure it runs in the auction simulation and is bug-free. All code necessary to run the agent
            should be in TEAMNAMEbudget.py (do not use helper files).
            Describe in a few sentences how it works, why it is designed this way, and how you
            expect it to perform in the class competition. You are not expected to spend many hours
            on writing an optimal agent, unless you want to. Consider a few possible strategies, try
            them out, pick the best one.
            NOTE:ifyouragent throws an error in a round in the competition, it will be considered
            to have a bid of zero in that round.
          (b) [5 Points] The top five placers in the class tournament will each receive five bonus
            points.
            The settings used for the tournament will be
            python auction.py --perms 24 --num-rounds 48 --mech=gsp
            --iters 100 --budget 60000
            (followed by the list of submitted agents)
                             8
